{"ast":null,"code":"var _jsxFileName = \"/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx\";\nimport React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactMe extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contactMe: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your E-mail:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        subject: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"The Subject:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        message: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Message:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      eraseValues: false\n    };\n\n    this.inputContactMeChangedHandler = (event, inputIdentifier) => {\n      const updatedContactMeForm = { ...this.state.contactMe\n      };\n      const updatedContactMeFormElement = { ...updatedContactMeForm[inputIdentifier]\n      };\n      updatedContactMeFormElement.value = event.target.value;\n      updatedContactMeFormElement.valid = this.checkValidity(updatedContactMeFormElement.value, updatedContactMeFormElement.validation);\n      updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n      console.log(updatedContactMeFormElement);\n      this.setState({\n        contactMe: updatedContactMeForm\n      });\n    };\n\n    this.contactMeHandler = event => {\n      event.preventDefault();\n      const message = {\n        name: this.state.contactMe.name.value,\n        email: this.state.contactMe.email.value,\n        subject: this.state.contactMe.subject.value,\n        message: this.state.contactMe.message.value\n      };\n      axios.post('/messages.json', message).then(response => {\n        this.setState({\n          eraseValues: true\n        });\n        console.log(response, message);\n      }).catch(error => {\n        this.setState({\n          eraseValues: false\n        });\n        console.log(error, message);\n      });\n      const contactMeState = { ...this.state.contactMe\n      };\n      contactMeState.name.value = '';\n      contactMeState.email.value = '';\n      contactMeState.subject.value = '';\n      contactMeState.message.value = '';\n      this.setState({\n        contactMe: contactMeState\n      });\n    };\n\n    this.contactMeResetHandler = event => {\n      const contactMeState = { ...this.state.contactMe\n      };\n      contactMeState.name.value = '';\n      contactMeState.email.value = '';\n      contactMeState.subject.value = '';\n      contactMeState.message.value = '';\n      this.setState({\n        contactMe: contactMeState\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactMe) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactMe[key]\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contactMe\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blueDot\",\n          style: {\n            marginTop: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Let's talk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeForm\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          style: {\n            width: '100%'\n          },\n          onSubmit: this.contactMeHandler,\n          onReset: this.contactMeResetHandler,\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(ContactMeInput, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            invalid: !formElement.config.valid,\n            contactMeChanged: event => this.inputContactMeChangedHandler(event, formElement.id)\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: 'btn1',\n            children: \"SEND\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"reset\",\n            className: 'btn2',\n            children: \"CLEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactMe;","map":{"version":3,"sources":["/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx"],"names":["React","Component","ContactMeInput","axios","ContactMe","state","contactMe","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","subject","message","eraseValues","inputContactMeChangedHandler","event","inputIdentifier","updatedContactMeForm","updatedContactMeFormElement","target","checkValidity","console","log","setState","contactMeHandler","preventDefault","post","then","response","catch","error","contactMeState","contactMeResetHandler","rules","isValid","trim","render","formElementsArray","key","push","id","config","marginTop","width","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\n\nclass ContactMe extends Component {\n    state = { \n        contactMe: { \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Name:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your E-mail:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            subject:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"The Subject:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            message:  {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Message:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        eraseValues: false,\n     }\n\n     checkValidity(value, rules) { \n         let isValid = false;\n        if(rules.required) { \n            isValid = value.trim() !== '';\n        }\n        return isValid;\n     }\n\n     inputContactMeChangedHandler = (event, inputIdentifier) => {\n        const updatedContactMeForm = {\n            ...this.state.contactMe\n        };\n        const updatedContactMeFormElement = {...updatedContactMeForm[inputIdentifier]};\n        updatedContactMeFormElement.value = event.target.value;\n        updatedContactMeFormElement.valid = this.checkValidity(updatedContactMeFormElement.value, updatedContactMeFormElement.validation);\n        updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n        console.log(updatedContactMeFormElement);\n        this.setState({contactMe: updatedContactMeForm});\n     }\n\n     contactMeHandler = (event) => {\n        event.preventDefault();\n        const message = {\n            name : this.state.contactMe.name.value,\n            email : this.state.contactMe.email.value,\n            subject : this.state.contactMe.subject.value,\n            message : this.state.contactMe.message.value,\n        }\n\n         axios.post('/messages.json', message)\n            .then (response => {\n                this.setState({eraseValues : true});\n                console.log(response, message);\n            })\n            .catch (error => {\n                this.setState({eraseValues : false});\n                console.log(error, message);\n            })\n\n            const contactMeState = {...this.state.contactMe};\n            contactMeState.name.value = '';\n            contactMeState.email.value = '';\n            contactMeState.subject.value = '';\n            contactMeState.message.value = '';\n            this.setState({contactMe : contactMeState});\n     }\n\n     contactMeResetHandler = (event) => {\n         const contactMeState = {...this.state.contactMe};\n         contactMeState.name.value = '';\n         contactMeState.email.value = '';\n         contactMeState.subject.value = '';\n         contactMeState.message.value = '';\n         this.setState({contactMe : contactMeState});\n     }\n\n\n    render() { \n        const formElementsArray = [];\n        for(let key in this.state.contactMe) { \n            formElementsArray.push({\n                id: key,\n                config: this.state.contactMe[key],\n            });\n        }\n        return ( \n            <div className=\"contactMe\">\n            <div className=\"contactMeHeader\"><div className=\"blueDot\" style={{marginTop: 12}} /><h1>Let's talk</h1></div>\n                <div className=\"contactMeForm\">\n                    <form style={{width: '100%'}} onSubmit={this.contactMeHandler} onReset={this.contactMeResetHandler} >\n                        {formElementsArray.map(formElement => (\n                            <ContactMeInput \n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                invalid={!formElement.config.valid}\n                                contactMeChanged={(event) => this.inputContactMeChangedHandler(event, formElement.id)} />\n                        ))}\n                        <button type=\"submit\" className={'btn1'}>SEND</button>\n                        <button type =\"reset\" className={'btn2'}>CLEAR</button>\n                    </form>\n                </div>\n            </div> \n         );\n    }\n}\n \nexport default ContactMe;"]},"metadata":{},"sourceType":"module"}