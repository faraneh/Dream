{"ast":null,"code":"var _jsxFileName = \"/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx\";\nimport React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactMe extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contactMe: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name:\"\n          },\n          value: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your E-mail:\"\n          },\n          value: ''\n        },\n        subject: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"The Subject:\"\n          },\n          value: ''\n        },\n        message: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Message:\"\n          },\n          value: ''\n        }\n      },\n      eraseValues: false\n    };\n\n    this.inputContactMeChangedHandler = (event, inputIdentifier) => {\n      const updatedContactMeForm = { ...this.state.contactMe\n      };\n      const updatedContactMeFormElement = { ...updatedContactMeForm[inputIdentifier]\n      };\n      updatedContactMeFormElement.value = event.target.value;\n      updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n      this.setState({\n        contactMe: updatedContactMeForm\n      });\n    };\n\n    this.contactMeHandler = event => {\n      console.log('Hellow');\n      const message = {\n        name: this.state.contactMe.name.value,\n        email: this.state.contactMe.email.value,\n        subject: this.state.contactMe.subject.value,\n        message: this.state.contactMe.message.value\n      };\n      axios.post('/messages.json', message).then(response => {\n        this.setState({\n          eraseValues: true\n        });\n        console.log(response, message);\n      }).catch(error => {\n        this.setState({\n          eraseValues: false\n        });\n        console.log(error, message);\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactMe) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactMe[key]\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contactMe\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blueDot\",\n          style: {\n            marginTop: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Let's talk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeForm\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          style: {\n            width: '100%'\n          },\n          onSubmit: () => this.contactMeHandler(),\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(ContactMeInput, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            contactMeChanged: event => this.inputContactMeChangedHandler(event, formElement.id)\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn1',\n            children: \"SEND\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn2',\n            children: \"CLEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactMe;","map":{"version":3,"sources":["/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx"],"names":["React","Component","ContactMeInput","axios","ContactMe","state","contactMe","name","elementType","elementConfig","type","placeholder","value","email","subject","message","eraseValues","inputContactMeChangedHandler","event","inputIdentifier","updatedContactMeForm","updatedContactMeFormElement","target","setState","contactMeHandler","console","log","post","then","response","catch","error","render","formElementsArray","key","push","id","config","marginTop","width","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\n\nclass ContactMe extends Component {\n    state = { \n        contactMe: { \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Name:\"\n                },\n                value: '',\n            },\n            email:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your E-mail:\"\n                },\n                value: '',\n            },\n            subject:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"The Subject:\"\n                },\n                value: '',\n            },\n            message:  {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Message:\"\n                },\n                value: '',\n            },\n        },\n        eraseValues: false,\n     }\n\n     inputContactMeChangedHandler = (event, inputIdentifier) => {\n        const updatedContactMeForm = {\n            ...this.state.contactMe\n        };\n        const updatedContactMeFormElement = {...updatedContactMeForm[inputIdentifier]};\n        updatedContactMeFormElement.value = event.target.value;\n        updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n        this.setState({contactMe: updatedContactMeForm});\n     }\n\n     contactMeHandler = (event) => {\n        console.log('Hellow');\n        const message = {\n            name : this.state.contactMe.name.value,\n            email : this.state.contactMe.email.value,\n            subject : this.state.contactMe.subject.value,\n            message : this.state.contactMe.message.value,\n        }\n\n         axios.post('/messages.json', message)\n            .then (response => {\n                this.setState({eraseValues : true});\n                console.log(response, message);\n            })\n            .catch (error => {\n                this.setState({eraseValues : false});\n                console.log(error, message);\n            })\n     }\n\n\n    render() { \n        const formElementsArray = [];\n        for(let key in this.state.contactMe) { \n            formElementsArray.push({\n                id: key,\n                config: this.state.contactMe[key],\n            });\n        }\n        return ( \n            <div className=\"contactMe\">\n            <div className=\"contactMeHeader\"><div className=\"blueDot\" style={{marginTop: 12}} /><h1>Let's talk</h1></div>\n                <div className=\"contactMeForm\">\n                    <form style={{width: '100%'}} onSubmit={() => this.contactMeHandler()} >\n                        {formElementsArray.map(formElement => (\n                            <ContactMeInput \n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                contactMeChanged={(event) => this.inputContactMeChangedHandler(event, formElement.id)} />\n                        ))}\n                        <button className={'btn1'}>SEND</button>\n                        <button className={'btn2'}>CLEAR</button>\n                    </form>\n                </div>\n            </div> \n         );\n    }\n}\n \nexport default ContactMe;"]},"metadata":{},"sourceType":"module"}