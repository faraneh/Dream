{"ast":null,"code":"var _jsxFileName = \"/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx\";\nimport React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\nimport emailjs from 'emailjs-com';\nimport MainPageFooter from '../mainPage/mainPageFooter/mainPageFooter';\nimport Navbar from '../navbar/navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactMe extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contactMe: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your E-mail:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        subject: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"The Subject:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        message: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Message:\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      emailIsValid: true\n    };\n\n    this.inputContactMeChangedHandler = (event, inputIdentifier) => {\n      const updatedContactMeForm = { ...this.state.contactMe\n      };\n      const updatedContactMeFormElement = { ...updatedContactMeForm[inputIdentifier]\n      };\n      updatedContactMeFormElement.value = event.target.value;\n      updatedContactMeFormElement.valid = this.checkValidity(updatedContactMeFormElement.value, updatedContactMeFormElement.validation);\n      updatedContactMeFormElement.touched = true;\n      updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifiers in updatedContactMeForm) {\n        formIsValid = updatedContactMeForm[inputIdentifiers].valid && formIsValid;\n      }\n\n      this.setState({\n        contactMe: updatedContactMeForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.contactMeHandler = event => {\n      event.preventDefault();\n      let testEmail = /^[ ]*([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})[ ]*$/i;\n      const emailIsValid = testEmail.test(this.state.contactMe.email.value) ? true : false;\n      this.setState({\n        emailIsValid\n      });\n\n      if (this.state.formIsValid && this.state.emailIsValid) {\n        const message = {\n          name: this.state.contactMe.name.value,\n          email: this.state.contactMe.email.value,\n          subject: this.state.contactMe.subject.value,\n          message: this.state.contactMe.message.value\n        };\n        axios.post('/messages.json', message).then(response => {\n          this.setState({\n            eraseValues: true\n          });\n          console.log(response, message);\n        }).catch(error => {\n          this.setState({\n            eraseValues: false\n          });\n          console.log(error, message);\n        });\n        const contactMeState = { ...this.state.contactMe\n        };\n        contactMeState.name.value = '';\n        contactMeState.email.value = '';\n        contactMeState.subject.value = '';\n        contactMeState.message.value = '';\n        this.setState({\n          contactMe: contactMeState,\n          formIsValid: false,\n          emailIsValid: true\n        });\n        emailjs.sendForm('service_u3f4n8v', 'template_62bzl5w', event.target, 'user_KMoTiil2oiOhxeTrud4K9').then(result => {\n          console.log(result.text);\n        }, error => {\n          console.log(error.text);\n        });\n      }\n    };\n\n    this.contactMeResetHandler = event => {\n      const contactMeState = { ...this.state.contactMe\n      };\n      contactMeState.name.value = '';\n      contactMeState.email.value = '';\n      contactMeState.subject.value = '';\n      contactMeState.message.value = '';\n      this.setState({\n        contactMe: contactMeState\n      });\n    };\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n\n    return isValid;\n  } ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactMe) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactMe[key]\n      });\n    }\n\n    var emailAlertDisplay = this.state.emailIsValid ? \"none\" : \"block\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contactMe\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        className: 'mainPageNavbarStyle'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blueDot\",\n          style: {\n            marginTop: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Let's talk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeForm\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          style: {\n            width: '100%'\n          },\n          onSubmit: this.contactMeHandler,\n          onReset: this.contactMeResetHandler,\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(ContactMeInput, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            invalid: !formElement.config.valid,\n            touched: formElement.config.touched,\n            contactMeChanged: event => this.inputContactMeChangedHandler(event, formElement.id),\n            name: formElement.id,\n            emailConfirmation: this.contactMeEmailConfirmation\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: this.state.formIsValid ? 'btn1' : 'btn2',\n            disabled: !this.state.formIsValid,\n            children: \"SEND\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"reset\",\n            className: 'btn2',\n            children: \"CLEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: {\n                emailAlertDisplay\n              },\n              border: '1px solid red'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"emailValidation\",\n              children: \"Please revise your email input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 94\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MainPageFooter, {\n        style: {\n          position: 'relative'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactMe;","map":{"version":3,"sources":["/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx"],"names":["React","Component","ContactMeInput","axios","emailjs","MainPageFooter","Navbar","ContactMe","state","contactMe","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","subject","message","formIsValid","emailIsValid","inputContactMeChangedHandler","event","inputIdentifier","updatedContactMeForm","updatedContactMeFormElement","target","checkValidity","inputIdentifiers","setState","contactMeHandler","preventDefault","testEmail","test","post","then","response","eraseValues","console","log","catch","error","contactMeState","sendForm","result","text","contactMeResetHandler","rules","isValid","trim","render","formElementsArray","key","push","id","config","emailAlertDisplay","marginTop","width","map","formElement","contactMeEmailConfirmation","display","border","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\nimport emailjs from 'emailjs-com';\nimport MainPageFooter from '../mainPage/mainPageFooter/mainPageFooter';\nimport Navbar from '../navbar/navbar';\n\nclass ContactMe extends Component {\n    state = { \n        contactMe: { \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Name:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your E-mail:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            subject:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"The Subject:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            message:  {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Message:\"\n                },\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        formIsValid: false,\n        emailIsValid: true,\n     }\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n     checkValidity(value, rules) { \n         let isValid = false;\n        if(rules.required) { \n            isValid = value.trim() !== '';\n        }\n        return isValid;\n     }\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n     inputContactMeChangedHandler = (event, inputIdentifier) => {\n        const updatedContactMeForm = {\n            ...this.state.contactMe\n        };\n        const updatedContactMeFormElement = {...updatedContactMeForm[inputIdentifier]};\n        updatedContactMeFormElement.value = event.target.value;\n        updatedContactMeFormElement.valid = this.checkValidity(updatedContactMeFormElement.value, updatedContactMeFormElement.validation);\n        updatedContactMeFormElement.touched = true;\n        updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n\n        let formIsValid = true;\n        for(let inputIdentifiers in updatedContactMeForm) { \n            formIsValid = updatedContactMeForm[inputIdentifiers].valid && formIsValid;\n        }\n\n        this.setState({contactMe: updatedContactMeForm, formIsValid : formIsValid});\n     }\n\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n     \n     contactMeHandler = (event) => {\n        event.preventDefault();\n\n        let testEmail =    /^[ ]*([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})[ ]*$/i;\n        const emailIsValid = testEmail.test(this.state.contactMe.email.value) ? true : false;\n        this.setState({ emailIsValid });\n\n        \n        if(this.state.formIsValid && this.state.emailIsValid) { \n            const message = {\n                name : this.state.contactMe.name.value,\n                email : this.state.contactMe.email.value,\n                subject : this.state.contactMe.subject.value,\n                message : this.state.contactMe.message.value,\n            }\n    \n             axios.post('/messages.json', message)\n                .then (response => {\n                    this.setState({eraseValues : true});\n                    console.log(response, message);\n                })\n                .catch (error => {\n                    this.setState({eraseValues : false});\n                    console.log(error, message);\n                })\n    \n                const contactMeState = {...this.state.contactMe};\n                contactMeState.name.value = '';\n                contactMeState.email.value = '';\n                contactMeState.subject.value = '';\n                contactMeState.message.value = '';\n                this.setState({contactMe : contactMeState, formIsValid : false, emailIsValid : true});\n    \n                \n                emailjs.sendForm('service_u3f4n8v', 'template_62bzl5w', event.target, 'user_KMoTiil2oiOhxeTrud4K9')\n                .then((result) => {\n                    console.log(result.text);\n                }, (error) => {\n                    console.log(error.text);\n                });\n\n        }\n     }\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n     contactMeResetHandler = (event) => {\n         const contactMeState = {...this.state.contactMe};\n         contactMeState.name.value = '';\n         contactMeState.email.value = '';\n         contactMeState.subject.value = '';\n         contactMeState.message.value = '';\n         this.setState({contactMe : contactMeState});\n     }\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    render() { \n        const formElementsArray = [];\n        for(let key in this.state.contactMe) { \n            formElementsArray.push({\n                id: key,\n                config: this.state.contactMe[key],\n            });\n        }\n        \n        var emailAlertDisplay = this.state.emailIsValid ? \"none\" : \"block\";\n\n        return ( \n            <div className=\"contactMe\">\n            <Navbar className={'mainPageNavbarStyle'} /> \n            <div className=\"contactMeHeader\"><div className=\"blueDot\" style={{marginTop: 12}} /><h1>Let's talk</h1></div>\n                <div className=\"contactMeForm\">\n                    <form style={{width: '100%'}} onSubmit={this.contactMeHandler} onReset={this.contactMeResetHandler} >\n                        {formElementsArray.map(formElement => (\n                            <ContactMeInput \n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                invalid={!formElement.config.valid}\n                                touched={formElement.config.touched}\n                                contactMeChanged={(event) => this.inputContactMeChangedHandler(event, formElement.id)}\n                                name={formElement.id}\n                                emailConfirmation={this.contactMeEmailConfirmation} />\n                        ))}\n                        <button type=\"submit\" className={this.state.formIsValid ? 'btn1' : 'btn2'} disabled={!this.state.formIsValid}>SEND</button>\n                        <button type =\"reset\" className={'btn2'}>CLEAR</button>\n                        <div style={{display: {emailAlertDisplay}, border: '1px solid red'}}><p className=\"emailValidation\">Please revise your email input</p></div>\n                    </form>\n                </div>\n                <MainPageFooter style={{position: 'relative'}} />\n            </div> \n         );\n    }\n}\n \nexport default ContactMe;"]},"metadata":{},"sourceType":"module"}