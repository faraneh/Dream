{"ast":null,"code":"var _jsxFileName = \"/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx\";\nimport React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\nimport emailjs from 'emailjs-com';\nimport MainPageFooter from '../mainPage/mainPageFooter/mainPageFooter';\nimport Navbar from '../navbar/navbar';\nimport { faBorderNone } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactMe extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contactMe: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"\"\n          },\n          placeholder: \"Your Name:\",\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"\"\n          },\n          placeholder: \"Your E-mail:\",\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        subject: {\n          elementType: 'input',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"\"\n          },\n          placeholder: \"The Subject:\",\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        message: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"\"\n          },\n          placeholder: \"Your Message:\",\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      emailIsNotValid: 'false',\n      formDisplay: 'none',\n      messageDisplay: 'block'\n    };\n\n    this.inputContactMeChangedHandler = (event, inputIdentifier) => {\n      const updatedContactMeForm = { ...this.state.contactMe\n      };\n      const updatedContactMeFormElement = { ...updatedContactMeForm[inputIdentifier]\n      };\n      updatedContactMeFormElement.value = event.target.value;\n      updatedContactMeFormElement.valid = this.checkValidity(updatedContactMeFormElement.value, updatedContactMeFormElement.validation);\n      updatedContactMeFormElement.touched = true;\n      updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifiers in updatedContactMeForm) {\n        formIsValid = updatedContactMeForm[inputIdentifiers].valid && formIsValid;\n      }\n\n      this.setState({\n        contactMe: updatedContactMeForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.contactMeHandler = async event => {\n      event.preventDefault();\n      let testEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      let emailValidation = testEmail.test(this.state.contactMe.email.value);\n      let emailConflict = !emailValidation;\n      await this.setState({\n        emailIsNotValid: emailConflict\n      });\n      let contactMemailValidationFinal = !this.state.emailIsNotValid; // console.log('emailValidation : ' + emailValidation);\n      // console.log('emailIsNotValid : ' + this.state.emailIsNotValid);\n      // console.log('if : ' + this.state.formIsValid && !this.state.emailIsNotValid);\n\n      if (this.state.formIsValid && contactMemailValidationFinal) {\n        const message = {\n          name: this.state.contactMe.name.value,\n          email: this.state.contactMe.email.value,\n          subject: this.state.contactMe.subject.value,\n          message: this.state.contactMe.message.value\n        };\n        axios.post('/messages.json', message).then(response => {\n          this.setState({\n            eraseValues: true\n          });\n          console.log(response, message);\n        }).catch(error => {\n          this.setState({\n            eraseValues: false\n          });\n          console.log(error, message);\n        });\n        const contactMeState = { ...this.state.contactMe\n        };\n        contactMeState.name.value = '';\n        contactMeState.email.value = '';\n        contactMeState.subject.value = '';\n        contactMeState.message.value = '';\n        this.setState({\n          contactMe: contactMeState,\n          formIsValid: false,\n          emailIsNotValid: false\n        });\n        emailjs.sendForm('service_u3f4n8v', 'template_62bzl5w', event.target, 'user_KMoTiil2oiOhxeTrud4K9').then(result => {\n          console.log(result.text);\n        }, error => {\n          console.log(error.text);\n        });\n      } else {\n        let contactMeCopy = this.state.contactMe;\n        contactMeCopy.email.valid = false;\n        contactMeCopy.email.touched = true;\n        this.setState({\n          contactMe: contactMeCopy\n        });\n        return;\n      }\n    };\n\n    this.contactMeResetHandler = event => {\n      const contactMeState = { ...this.state.contactMe\n      };\n      contactMeState.name.value = '';\n      contactMeState.email.value = '';\n      contactMeState.subject.value = '';\n      contactMeState.message.value = '';\n      this.setState({\n        contactMe: contactMeState\n      });\n    };\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n\n    return isValid;\n  } ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactMe) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactMe[key]\n      });\n    }\n\n    let emailAlertDisplay = 'none';\n\n    if (this.state.emailIsNotValid === true) {\n      emailAlertDisplay = 'block';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contactMe\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        className: 'mainPageNavbarStyle'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blueDot\",\n          style: {\n            marginTop: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Let's talk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeForm\",\n        style: {\n          display: 'block'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          style: {\n            width: '100%'\n          },\n          onSubmit: this.contactMeHandler,\n          onReset: this.contactMeResetHandler,\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(ContactMeInput, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            invalid: !formElement.config.valid,\n            touched: formElement.config.touched,\n            contactMeChanged: event => this.inputContactMeChangedHandler(event, formElement.id),\n            name: formElement.id,\n            emailConfirmation: this.contactMeEmailConfirmation,\n            emailRedAlert: emailAlertDisplay,\n            title: formElement.config.placeholder\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: this.state.formIsValid ? 'btn1' : 'btn2',\n            disabled: !this.state.formIsValid,\n            children: \"SEND\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"reset\",\n            className: 'btn2',\n            children: \"CLEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                display: emailAlertDisplay\n              },\n              children: \"Please revise your email input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contactMeThankYou\",\n        style: {\n          display: 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"THANK YOU\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A Confirmation Email has been sent to your email.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MainPageFooter, {\n        style: {\n          position: 'relative'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactMe;","map":{"version":3,"sources":["/Users/farane/Documents/Codes/dream-GITHUB/src/components/contactMe/contactMe.jsx"],"names":["React","Component","ContactMeInput","axios","emailjs","MainPageFooter","Navbar","faBorderNone","ContactMe","state","contactMe","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","subject","message","formIsValid","emailIsNotValid","formDisplay","messageDisplay","inputContactMeChangedHandler","event","inputIdentifier","updatedContactMeForm","updatedContactMeFormElement","target","checkValidity","inputIdentifiers","setState","contactMeHandler","preventDefault","testEmail","emailValidation","test","emailConflict","contactMemailValidationFinal","post","then","response","eraseValues","console","log","catch","error","contactMeState","sendForm","result","text","contactMeCopy","contactMeResetHandler","rules","isValid","trim","render","formElementsArray","key","push","id","config","emailAlertDisplay","marginTop","display","width","map","formElement","contactMeEmailConfirmation","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './contactMe.css';\nimport ContactMeInput from './contactMeInput/contactMeInput';\nimport axios from '../../axios-orders';\nimport emailjs from 'emailjs-com';\nimport MainPageFooter from '../mainPage/mainPageFooter/mainPageFooter';\nimport Navbar from '../navbar/navbar';\nimport { faBorderNone } from '@fortawesome/free-solid-svg-icons';\n\nclass ContactMe extends Component {\n    state = { \n        contactMe: { \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"\",\n                },\n                placeholder: \"Your Name:\",\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"\",\n                },\n                placeholder: \"Your E-mail:\",\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            subject:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"\",\n                },\n                placeholder: \"The Subject:\",\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            message:  {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"\",\n                },\n                placeholder: \"Your Message:\",\n                value: '',\n                validation: { \n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        formIsValid: false,\n        emailIsNotValid: 'false',\n        formDisplay: 'none',\n        messageDisplay: 'block',\n    }\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n     checkValidity(value, rules) { \n         let isValid = false;\n        if(rules.required) { \n            isValid = value.trim() !== '';\n        }\n        return isValid;\n     }\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n     inputContactMeChangedHandler = (event, inputIdentifier) => {\n        const updatedContactMeForm = {\n            ...this.state.contactMe\n        };\n        const updatedContactMeFormElement = {...updatedContactMeForm[inputIdentifier]};\n        updatedContactMeFormElement.value = event.target.value;\n        updatedContactMeFormElement.valid = this.checkValidity(updatedContactMeFormElement.value, updatedContactMeFormElement.validation);\n        updatedContactMeFormElement.touched = true;\n        updatedContactMeForm[inputIdentifier] = updatedContactMeFormElement;\n\n        let formIsValid = true;\n        for(let inputIdentifiers in updatedContactMeForm) { \n            formIsValid = updatedContactMeForm[inputIdentifiers].valid && formIsValid;\n        }\n\n        this.setState({contactMe : updatedContactMeForm, formIsValid : formIsValid});\n     }\n\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n     \n     contactMeHandler = async (event) => {\n        event.preventDefault();\n\n        let testEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let emailValidation = testEmail.test(this.state.contactMe.email.value);\n        let emailConflict = !emailValidation;\n        await this.setState({ emailIsNotValid : emailConflict });\n        let contactMemailValidationFinal = !this.state.emailIsNotValid;\n\n        // console.log('emailValidation : ' + emailValidation);\n        // console.log('emailIsNotValid : ' + this.state.emailIsNotValid);\n        // console.log('if : ' + this.state.formIsValid && !this.state.emailIsNotValid);\n\n        \n        if(this.state.formIsValid && contactMemailValidationFinal) { \n            const message = {\n                name : this.state.contactMe.name.value,\n                email : this.state.contactMe.email.value,\n                subject : this.state.contactMe.subject.value,\n                message : this.state.contactMe.message.value,\n            }\n    \n             axios.post('/messages.json', message)\n                .then (response => {\n                    this.setState({eraseValues : true});\n                    console.log(response, message);\n                })\n                .catch (error => {\n                    this.setState({eraseValues : false});\n                    console.log(error, message);\n                })\n\n    \n                const contactMeState = {...this.state.contactMe};\n                contactMeState.name.value = '';\n                contactMeState.email.value = '';\n                contactMeState.subject.value = '';\n                contactMeState.message.value = '';\n                this.setState({contactMe : contactMeState, formIsValid : false, emailIsNotValid : false});\n    \n                \n                emailjs.sendForm('service_u3f4n8v', 'template_62bzl5w', event.target, 'user_KMoTiil2oiOhxeTrud4K9')\n                .then((result) => {\n                    console.log(result.text);\n                }, (error) => {\n                    console.log(error.text);\n                });\n\n        } else {\n            let contactMeCopy = this.state.contactMe;\n            contactMeCopy.email.valid = false;\n            contactMeCopy.email.touched = true;\n            this.setState({contactMe : contactMeCopy})\n            return;\n        }\n     }\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n     contactMeResetHandler = (event) => {\n         const contactMeState = {...this.state.contactMe};\n         contactMeState.name.value = '';\n         contactMeState.email.value = '';\n         contactMeState.subject.value = '';\n         contactMeState.message.value = '';\n         this.setState({contactMe : contactMeState});\n     }\n\n     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    render() { \n        const formElementsArray = [];\n        for(let key in this.state.contactMe) { \n            formElementsArray.push({\n                id: key,\n                config: this.state.contactMe[key],\n            });\n        }\n        \n        let emailAlertDisplay = 'none';\n        if(this.state.emailIsNotValid === true) { \n            emailAlertDisplay = 'block';\n        }\n        \n\n        return ( \n            <div className=\"contactMe\">\n            <Navbar className={'mainPageNavbarStyle'} /> \n            <div className=\"contactMeHeader\"><div className=\"blueDot\" style={{marginTop: 12}} /><h1>Let's talk</h1></div>\n                <div className=\"contactMeForm\"  style={{display : 'block'}}>\n                    <form style={{width: '100%'}} onSubmit={this.contactMeHandler} onReset={this.contactMeResetHandler} >\n                        {formElementsArray.map(formElement => (\n                            <ContactMeInput \n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                invalid={!formElement.config.valid}\n                                touched={formElement.config.touched}\n                                contactMeChanged={(event) => this.inputContactMeChangedHandler(event, formElement.id)}\n                                name={formElement.id}\n                                emailConfirmation={this.contactMeEmailConfirmation}\n                                emailRedAlert={emailAlertDisplay}\n                                title={formElement.config.placeholder} />\n                        ))}\n                        <button type=\"submit\" className={this.state.formIsValid ? 'btn1' : 'btn2'} disabled={!this.state.formIsValid}>SEND</button>\n                        <button type=\"reset\" className={'btn2'}>CLEAR</button>\n                        <div><p style={{display: emailAlertDisplay}}>Please revise your email input</p></div>\n                    </form>\n                </div>\n                <div className=\"contactMeThankYou\" style={{display : 'none'}}>\n                    <h2>THANK YOU</h2>\n                    <p>A Confirmation Email has been sent to your email.</p>\n                </div>\n                <MainPageFooter style={{position: 'relative'}} />\n            </div> \n         );\n    }\n}\n \nexport default ContactMe;"]},"metadata":{},"sourceType":"module"}